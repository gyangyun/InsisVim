snippet jlzxutils_import "jlzxutils import" b

import logging
import warnings
from pathlib import Path

import numpy as np
import pandas as pd
from jlzxutils.analysis import *
from jlzxutils.describe import *
from jlzxutils.holiday import *
from jlzxutils.hydl import *
from jlzxutils.industry import *
from jlzxutils.plotly import *
from jlzxutils.utils import *

warnings.filterwarnings('ignore')

LOGGER = logging.getLogger(__name__)
LOGGER.addHandler(logging.NullHandler())
#  =========================工程目录=========================
root_path = Path('.')

themes = ['$1']
mk_project_dirs(root_path, themes, is_output=${2:False})

data_path = root_path.joinpath('data')
cache_path = root_path.joinpath('cache')
fig_path = root_path.joinpath('figure')
material_path = root_path.joinpath('material')
#  =========================常用枚举值=========================
is_dunshou = True
sfmc_l = ['广东', '广西', '云南', '贵州', '海南', '全网', '广东（不含广深）', '广东（含广州）', '广州', '深圳']

gddwbm_df = read_hydl_file(data_path.joinpath('南网供电单位编码_地市.xlsx'))
xx_df = pd.read_excel(data_path.joinpath('信息编码.xlsx'))
if is_dunshou:
	hyfl_df = pd.read_csv(hyfl_data_path.joinpath('hyfl_136_tag.csv'))
	hyfl_df['tag_all'] = hyfl_df.iloc[:, 3:].apply(lambda s: ','.join(s.dropna().to_list()), axis=1)
	hyfl_df = hyfl_df[['order_no', 'hyfldm', 'hyflmc', 'tag_all']]
else:
	hyfl_df = pd.read_csv(hyfl_data_path.joinpath('hyfl_133.csv'))
endsnippet

snippet jlzxutils_path "jlzxutils path" b
def main(root_path):
	data_path = root_path.joinpath('data')
	fig_path = root_path.joinpath('figure')
	cache_path = root_path.joinpath('cache')
	material_path = root_path.joinpath('material')

	$1_cache_path = cache_path.joinpath('$2')
	$1_update_data_path = data_path.joinpath('$2/增量更新')
	$1_bak_data_path = data_path.joinpath('$2/历史备份')
	$1_material_path = material_path.joinpath('$2')
	$1_fig_path = fig_path.joinpath('$2')

	dirpath_l = [
		$1_cache_path,
		$1_update_data_path,
		$1_bak_data_path,
		$1_material_path,
		$1_fig_path,
	]
	mk_dirs(dirpath_l)
endsnippet

snippet jlzxutils_readwrite "jlzxutils readwrite" b
$1cache_path = cache_path.joinpath('$2')
$1update_data_path = data_path.joinpath('$2增量更新')
$1bak_data_path = data_path.joinpath('$2历史备份')

dirpath_l = [
	$1cache_path, $1update_data_path, $1bak_data_path,
]
mk_dirs(dirpath_l)

#  读取数据
LOGGER.info('正在更新省份行业电量...')
$1raw_df = update_df(
	cache_filepath=$1cache_path.joinpath('$1raw_df.pkl'),
	update_data_path=$1update_data_path,
	bak_data_path=$1bak_data_path,
	glob_str='*.xls*',
	read_file_func=read_hydl_file,
	subset=$3,
	describe_key_col=${4:None},
	describe_value_col=${5:None},
	$0)
endsnippet

snippet jlzxutils_raw_readwrite "jlzxutils raw readwrite" b
if cur_cache_path.joinpath('$1raw_df.pkl').exists():
	$1old_df = pd.read_pickle(cur_cache_path.joinpath('$1raw_df.pkl'))
else:
	$1old_df = pd.DataFrame()

cur_update_data_path = cur_data_path.joinpath('${2:增量更新}')
cur_bak_data_path = cur_data_path.joinpath('${3:历史备份}')

mk_dirs([cur_update_data_path, cur_bak_data_path])

$1fp_l = list(cur_update_data_path.glob('${4:*.xls*}'))
$1fp_l = sorted($1fp_l, key=lambda fp: fp.stat()[-2])
$1df_l = []
for tmp_fp in $1fp_l:
	tmp_df = read_hydl_file(tmp_fp)
	$1df_l.append(tmp_df)
	shutil.move(tmp_fp, cur_bak_data_path.joinpath(tmp_fp.name))

$1df_l.insert(0, $1old_df)
$1raw_df = concat_dfs($1df_l, subset=[$5], sort=True, ascending=True)

$1raw_df.to_pickle(cur_cache_path.joinpath('$1raw_df.pkl'))
$1raw_df = pd.read_pickle(cur_cache_path.joinpath('$1raw_df.pkl'))
endsnippet


snippet jlzxutils_paras "jlzxutils parameters" b
#  固定参数
space_cols = ['sfmc']
fl_cols = ['order_no', 'hyfldm', 'hyflmc']
time_cols = ['sjsj']
value_cols = ['dl']

sfmc_l = ['全网', '广东', '广西', '云南', '贵州', '海南']
endsnippet


snippet jlzxutils_add_stats_cols "jlzxutils add stats cols" b
stats_df = add_stats_cols(${1:df},
						periods=${2:[1, 12]},
						time_cols=${3:time_cols},
						by_cols=${4:by_cols},
						value_cols=${5:value_cols},
						ascending=${6:True},
						dropna=${7:False},
						is_shift_time=${8:False},
						filter_keys=${9:['shift', 'diff', 'pct_change']},
						inplace=${10:False})
endsnippet


snippet jlzxutils_timerange_stats "jlzxutils timerange stats" b
stats_d = timerange_stats(
	${1:df},
	id_cols=${2:id_cols},
	time_col=${3:'sjsj'},
	value_cols=${4:value_cols},
	start_datetime=${5:start_datetime},
	end_datetime=${6:end_datetime},
	timedeltas=${7:timedeltas},
	timeflags=${8:timeflags},
	aggfunc=${9:aggfunc},
	compare_types=${10:['shift', 'diff', 'pct_change']},
	is_zh=${11:False},
)
endsnippet


snippet jlzxutils_timerange_stats4dl "jlzxutils timerange stats4dl" b
stats_d = timerange_stats4dl(sf_hydl_r_df,
							${1:df},
							space_cols=${2:space_cols},
							fl_cols=${3:'fl_cols'},
							time_col=${4:'sjsj'},
							value_col=${5:'dl'},
							start_datetime=${6:start_datetime},
							end_datetime=${7:end_datetime},
							timedeltas=${8:timedeltas},
							timeflags=${9:timeflags},
							aggfunc=${10:aggfunc},
							compare_types=${11:['shift', 'diff', 'pct_change']},
							query_str=${12:'hyflmc == "全社会用电总计"'},
							is_zh=${13:False}
							)
endsnippet


snippet jlzxutils_r2y "jlzxutils r2y" b
if is_offset_fitting:
	$1 = append_offset_fitting_df(
		$1,
		time_col='sjsj',
		start_datetime=start_datetime,
		end_datetime=end_datetime,
		freq='D',
		timedelta=pd.DateOffset(days=-7),
		inplace=True)

if is_filter_by_time:
	$1 = filter_df_by_time4month(
		$1,
		time_col='sjsj',
		start_datetime=start_datetime,
		end_datetime=end_datetime,
		periods=periods)
endsnippet


snippet jlzxutils_sort_category_orders "jlzxutils sort_category_orders" b
sort_category_orders(
	decomposed_dl_df,
	category_orders_d={'sfmc': ['全网', '广东', '广西', '云南', '贵州', '海南']},
	sort_by_cols=['sfmc', 'order_no', 'hyfldm', 'hyflmc', 'sjsj'],
	ascending=True,
	dropna=False,
	inplace=True)
endsnippet


snippet jlzxutils_split2excel "jlzxutils split_to_excel" b
split_to_excel(
	stats_df,
	filepath=stats_df_path,
	by_cols='sfmc',
	category_orders_l=['全网', '广东', '广西', '云南', '贵州', '海南'],
	category_orders_d={'sfmc': ['全网', '广东', '广西', '云南', '贵州', '海南']},
	sort_by_cols=['order_no', 'hyfldm', 'hyflmc', 'sjsj'],
	is_category_type=False,
	ascending=True,
	is_reset_index=False,
	index=False,
	is_detail=True)
endsnippet


snippet jlzxutils_update_df "jlzxutils update_df" b
$1_raw_df = update_df(
	cache_filepath=$1_cache_path.joinpath('$1_raw_df.pkl'),
	update_data_path=$1_update_data_path,
	bak_data_path=$1_bak_data_path,
	glob_str='*?.xls*',
	read_file_func=pd.read_excel,
	subset=${2:None},
	describe_key_col=${3:None},
	describe_value_col=${4:None},
)
endsnippet

snippet jlzxutils_sfmc_l "jlzxutils sfmc list"
sfmc_l = ['广东', '广西', '云南', '贵州', '海南', '全网', '广东（不含广深）', '广东（含广州）', '广州', '深圳']
endsnippet

snippet jlzxutils_sfdm_l "jlzxutils sfdm list"
sfdm_l = ['03', '04', '05', '06', '07', '08', '09']
endsnippet
