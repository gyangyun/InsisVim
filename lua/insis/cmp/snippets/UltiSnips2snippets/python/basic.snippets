snippet not "not None test"
if ${1:value} is not None:
	${0:pass}
endsnippet

snippet pprint_g "dump variable"
import pprint
pprint.pprint(globals())
endsnippet

snippet if3 "ternary conditional operator"
${2:True} if ${1:True} else ${3:False}
endsnippet

snippet for_e "accessing the index in for loops" b
for ${1:idx}, ${2:val} in enumerate(${3:ints}):
	${0:pass}
endsnippet

snippet exists_l "To check the existence of a local variable" b
if ${1:'myVar'} in locals():
	${0:pass}
endsnippet

snippet exists_lo "To check if an object has an attribute" b
if locals().has_key(${1:'myVar'})
	${0:pass}
endsnippet

snippet exists_g "To check the existence of a global variable" b
if ${1:'myVar'} in globals():
	${0:pass}
endsnippet

snippet exists_gl "To check the existence of a global variable" b
if globals().has_key(${1:'myVar'})
	${0:pass}
endsnippet

snippet exists_d "To check the existence of a global variable" b
if ${1:'myVar'} in dir():
	${0:pass}
endsnippet

snippet exists_a "To check if an object has an attribute" b
if hasattr(${1:obj}, ${2:'attr_name'}):
	${0:pass}
endsnippet

snippet getattr "getattr(..., ...)" b
getattr(${1:obj}, ${2:attr})
endsnippet

snippet setattr "setattr(..., ...)" b
setattr(${1:obj}, ${2:attr}, ${3:value})
endsnippet

snippet hasattr "hasattr(..., ...)" b
hasattr(${1:obj}, ${2:attr})
endsnippet

snippet ipy "import ipython.." b
from IPython import embed; embed()
endsnippet

snippet timestamp "time format" b
import time
timestamp = time.strftime('%Y%m%d%H%M%S')
endsnippet

snippet time_delay "time delay" b
import time
before = time.time()
after = time.time()
delay = after - before
endsnippet

snippet lchunk "split a list into evenly sized chunks" b
def chunks(${1:l}, ${2:n}):
	""" Yield successive n-sized chunks from l.
	"""
	for i in range(0, len($1), $2):
		yield $1[i:i+$2]
endsnippet

snippet sliding_window "sliding window" b
$1_l = []
for i in range((len($1) // ${2:window_size}) + 1):
	$1_i = $1[i * $2: (i + 1) * $2]
	$1_l.append($1_i)
endsnippet

snippet lsort "sort a list of dictionaries by values of the dictionary"
sorted(${1:list_to_be_sorted}, key=lambda k: k['${2:name}'])
endsnippet
