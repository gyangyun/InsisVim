snippet file_read "file read" b
file, err := os.OpenFile(${0}, os.O_RDONLY, 0666)
if err := condition; err != nil {
	log.Fatalln("配置文件解析失败，请检查配置文件格式!")
}
defer file.Close()
endsnippet

snippet file_read_fast "file read fast" b
func readFileFast(filepath string) ([]byte, error) {
	data, err := ioutil.ReadFile(filepath)
	if err != nil {
		log.Printf(filepath + "does not exist")
		return []byte{}, err
	}
	return data, nil
}
endsnippet

snippet file_write_fast "file write fast" b
func writeFileFast(filepath string, content []byte) error {
	err := ioutil.WriteFile(filepath, content, 0666)
	if err != nil {
		return err
	}
	return nil
}
endsnippet


snippet file_exist "file exist" b
func isFileExist(filepath string) (bool, error) {
	_, err := os.Stat(filepath)
	if err != nil {
		if os.IsNotExist(err) {
			return false, nil
		}
		return false, err
	}
	return true, nil
}
endsnippet

snippet file_monitor "file monitor" b
func do() {
	defer func() {
		if err := recover(); err != nil {
			log.Printf("%s \n panic:\n %s", err, debug.Stack())
			do()
		}
	}()
	log.Info("正在初始化目录监控对象...")
	// 创建目录监控对象
	watch, err := fsnotify.NewWatcher()
	if err != nil {
		log.Fatal("初始化目录监控对象失败!")

	}
	defer watch.Close()

	// 添加要监控的对象，文件或文件夹
	if err := watch.Add(${1:monitoringDir}); err != nil {
		log.Fatal("目录监控对象添加监控目录失败!")
	}
	log.Info("初始化目录监控对象完成！")

	monitoringDirAbs, _ := filepath.Abs($1)
	log.Info("正在监控目录：" + monitoringDirAbs)

	for {
		select {
		case ev := <-watch.Events:
			{
				//判断事件发生的类型，如下5种
				// Create 创建
				// Write 写入
				// Remove 删除
				// Rename 重命名
				// Chmod 修改权限
				if ev.Op&fsnotify.Create == fsnotify.Create {
					fp, _ := filepath.Abs(ev.Name)
					log.Info("监控发现新任务文件：", fp)
					var lastSize int64
					var timesZero int
					timesZeroThreshold := 3
					for {
						fi, _ := os.Stat(fp)
						currentSize := fi.Size()
						if currentSize == 0 {
							if timesZero >= timesZeroThreshold {
								log.Warnf("文件经过%s后仍然无变化，忽略该文件！", ${2:monitoringPeriodDuration}*time.Duration(timesZeroThreshold))
								break
							}
							timesZero++
							time.Sleep($2)
						} else if currentSize > lastSize {
							lastSize = currentSize
							log.Info("等待文件写入完成...")
							time.Sleep($2)
							continue
						} else {
							log.Info("文件写入完成！")
							${0:doSometing(fp)}
							break
						}
					}
				}
			}
		case err := <-watch.Errors:
			{
				panic(err)
			}
		}
	}
}
endsnippet
